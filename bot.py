# -*- coding: utf-8 -*-

import logging
import asyncio
import aiohttp
import requests
import schedule
import time
import os
import openpyxl
import re
import sys
import pytz
import pandas as pd
from aiogram import F
from aiogram.filters import StateFilter
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from openpyxl import load_workbook
from openpyxl.utils import range_boundaries

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
TOKEN = "7766027837:AAFFORwPFg_CCZ5iEx0saTzCQL-ihXoHvNA"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

SCHEDULE_URL = "https://disk.yandex.ru/i/zBdSFy9HRBb9Pw"
FILE_PATH = "44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞.xlsx"
TEMP_FILE_PATH = "temp.xlsx"
last_update_time = None
UPDATE_INFO_FILE = "last_update.txt"
UPDATE_TIME = "22:00"
ADMIN_ID = 916756380
UPDATE_STATUS_FILE = "update_status.txt"

#–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª-—Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
def set_update_flag():
    with open(UPDATE_STATUS_FILE, "w") as file:
        file.write("updated")

#–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
def check_update_flag():
    return os.path.exists(UPDATE_STATUS_FILE)

#–£–¥–∞–ª—è–µ—Ç —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
def clear_update_flag():
    if os.path.exists(UPDATE_STATUS_FILE):
        os.remove(UPDATE_STATUS_FILE)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
@dp.message(Command("feedback"))
async def feedback_command(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(inline_keyboard=[  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")]
    ])
    await message.answer(f"üìù –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)
    await state.set_state(FeedbackState.waiting_for_feedback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
@dp.callback_query(F.data == "cancel_feedback", StateFilter(FeedbackState.waiting_for_feedback))
async def cancel_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–æ–¥ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –º–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ, –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –µ–≥–æ —É—Å–ª—ã—à–∞—Ç—å!")
    user_data = await state.get_data()
    group = user_data.get("group")
    await state.clear()
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    if group:
        await state.update_data(group=group)
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
                [KeyboardButton(text="–ù–µ–¥–µ–ª—è"), KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")],
                [KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞")]
            ],
            resize_keyboard=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º
@dp.message(FeedbackState.waiting_for_feedback)
async def receive_feedback(message: types.Message, state: FSMContext):
    user = message.from_user
    feedback_text = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{user.username if user.username else user.first_name}:\n\n{feedback_text}"
    await bot.send_message(ADMIN_ID, admin_message)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∫—É
    await message.answer("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    
     # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = await state.get_data()
    group = user_data.get("group")  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    await state.clear()
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    if group:
        await state.update_data(group=group)
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
                [KeyboardButton(text="–ù–µ–¥–µ–ª—è"), KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")],
                [KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞")]
            ],
            resize_keyboard=True
        )

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists("users.txt"):
        with open("users.txt", "r") as file:
            return set(int(line.strip()) for line in file)
    return set()

def save_user(user_id):
    if user_id not in subscribed_users:
        with open("users.txt", "a") as file:
            file.write(f"{user_id}\n")
        subscribed_users.add(user_id)

subscribed_users = load_users()

@dp.message(Command(commands=['subscribe']))
async def subscribe(message: types.Message):
    user_id = message.from_user.id
    if user_id not in subscribed_users:
        save_user(user_id)
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")
    else:
        await message.answer("üì¢ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def load_last_update():
    if os.path.exists(UPDATE_INFO_FILE):
        with open(UPDATE_INFO_FILE, "r") as file:
            return file.read().strip()
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def save_last_update(timestamp):
    with open(UPDATE_INFO_FILE, "w") as file:
        file.write(timestamp)

last_update_time = load_last_update()

#–ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def get_last_update_time():
    if os.path.exists("last_update.txt"):
        with open("last_update.txt", "r") as file:
            return file.read().strip()
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

update_time = get_last_update_time()

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
def get_direct_link(public_url):
    api_url = "https://cloud-api.yandex.net/v1/disk/public/resources/download"
    params = {"public_key": public_url}
    response = requests.get(api_url, params=params)
    if response.status_code == 200:
        return response.json().get("href")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {response.status_code}")
        return None

#–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
async def download_schedule():
    global last_update_time
    direct_link = get_direct_link(SCHEDULE_URL)
    if not direct_link:
        return False

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ temp
    if os.path.exists(FILE_PATH):
        os.rename(FILE_PATH, TEMP_FILE_PATH)

    response = requests.get(direct_link)
    if response.status_code == 200:
        with open(FILE_PATH, "wb") as file:
            file.write(response.content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
        if os.path.exists(TEMP_FILE_PATH):
            if compare_excel_files(TEMP_FILE_PATH, FILE_PATH):
                os.remove(FILE_PATH)  # –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                os.rename(TEMP_FILE_PATH, FILE_PATH)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π
                logging.info("–§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return False
            else:
                os.remove(TEMP_FILE_PATH)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª

        last_update_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        save_last_update(last_update_time)
        logging.info(f"–§–∞–π–ª {FILE_PATH} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        await notify_users_after_update()  # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return True
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
        return False

#–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞  
async def manual_download():
    global last_update_time
    direct_link = get_direct_link(SCHEDULE_URL)
    if not direct_link:
        return False

    response = requests.get(direct_link)
    if response.status_code == 200:
        with open(TEMP_FILE_PATH, "wb") as file:
            file.write(response.content)

        if os.path.exists(FILE_PATH):
            os.remove(FILE_PATH)
        os.rename(TEMP_FILE_PATH, FILE_PATH)

        last_update_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        save_last_update(last_update_time)
        logging.info(f"–§–∞–π–ª {FILE_PATH} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        await notify_users_after_update() # –í—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        return True
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
        return False

#–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ E –∏ F –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤
def compare_excel_files(file1, file2):
    try:
        df1 = pd.read_excel(file1, usecols=[4, 5])
        df2 = pd.read_excel(file2, usecols=[4, 5])
        return df1.equals(df2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return False

#–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def notify_users():
    for user_id in subscribed_users:
        try:
            await bot.send_message(user_id, "‚ôªÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_users_after_update():  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    for user_id in subscribed_users:
        try:
            await bot.send_message(user_id, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
#–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
async def update_and_restart():
    success = await download_schedule()
    if success:
        set_update_flag()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
        await notify_users()
        os.execv(sys.executable, [sys.executable] + sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
    else:
        logging.error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
        
#–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é
async def manual_update_and_restart():
    await notify_users()
    success = await manual_download()
    if success:
        set_update_flag()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
        os.execv(sys.executable, [sys.executable] + sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
    else:
        logging.error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")

@dp.message(Command(commands=['update_schedule']))
async def manual_update(message: types.Message):
    await message.answer("‚öôÔ∏è –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é...")
    last_update_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    save_last_update(last_update_time)
    await manual_update_and_restart()
    
#–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def auto_update():
    while True:
        now = datetime.now().strftime("%H:%M")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if now == UPDATE_TIME:
            logging.info("–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            await update_and_restart()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def unmerge_and_fill_cells(sheet):
    for merged_cell in list(sheet.merged_cells.ranges):
        min_col, min_row, max_col, max_row = range_boundaries(str(merged_cell))
        top_left_value = sheet.cell(row=min_row, column=min_col).value  # –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ª–µ–≤–æ–π —è—á–µ–π–∫–∏
        sheet.unmerge_cells(str(merged_cell))  # –†–∞–∑—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏

        for row in range(min_row, max_row + 1):
            for col in range(min_col, max_col + 1):
                sheet.cell(row=row, column=col).value = top_left_value  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —è—á–µ–π–∫–∏

#–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ B
def clean_column_b(file_path):
    wb = load_workbook(file_path)
    sheet = wb.active

    for row in sheet.iter_rows(min_col=2, max_col=2, min_row=2, values_only=False):
        cell = row[0]
        if cell.value:
            cell.value = str(cell.value).strip().replace("\n", "  ")

    wb.save("44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞_unmerged.xlsx")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
wb = load_workbook("44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞.xlsx")
sheet = wb.active
unmerge_and_fill_cells(sheet)
wb.save("44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞_unmerged.xlsx")

clean_column_b("44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞_unmerged.xlsx")  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ B

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
def load_transformed_schedule(file_path="44.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞_unmerged.xlsx"):
    if 'openpyxl' in sys.modules:
        del sys.modules['openpyxl']  # –£–¥–∞–ª—è–µ–º –∫–µ—à openpyxl
    if 'pandas' in sys.modules:
        del sys.modules['pandas']  # –£–¥–∞–ª—è–µ–º –∫–µ—à pandas

    wb = load_workbook(file_path, data_only=True)  # –ß–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ
    ws = wb.active
    data = ws.values
    columns = next(data)
    df = pd.DataFrame(data, columns=columns)
    return df

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ get_schedule
df = load_transformed_schedule()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_schedule(group, date):

    df = load_transformed_schedule()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    schedule = []
    date_str = date.strftime("%Y-%m-%d")
    today = datetime.now().date()
    found_date = False
    practice_counter = 0  # –°—á—ë—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π
    current_time = datetime.now().strftime("%H.%M")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú

    for i in range(len(df)):
        cell_date = pd.to_datetime(df.iloc[i, 0], errors='coerce')
        if pd.notna(cell_date) and cell_date.strftime("%Y-%m-%d") == date_str:
            found_date = True
            for j in range(7):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 7 —Å—Ç—Ä–æ–∫ –ø–æ–¥ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
                time_info = df.iloc[i + j, 1]  # –ù–∞–ø—Ä–∏–º–µ—Ä: "1 –ø–∞—Ä–∞ 9.00-10.30"
                group_1_schedule = df.iloc[i + j, 4]
                group_2_schedule = df.iloc[i + j, 5]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
                if group_1_schedule and "–ø—Ä–∞–∫—Ç–∏–∫–∞" in group_1_schedule.lower():
                    practice_counter += 1
                    continue

                if pd.notna(time_info):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                    match = re.match(r"(\d+ –ø–∞—Ä–∞)\s+(\d{1,2}\.\d{2}-\d{1,2}\.\d{2})", time_info)
                    if match:
                        pair_number = match.group(1)
                        pair_time = match.group(2)
                    else:
                        pair_number, pair_time = time_info, ""  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

                    pair_text = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—ã

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
                    is_current = date == today and is_current_pair(pair_time, current_time)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    if pd.notna(group_1_schedule) and pd.notna(group_2_schedule) and group_1_schedule == group_2_schedule:
                        pair_text = f"üìö{pair_number}üìö\n{pair_time}\nü´Ç{group_1_schedule}\n"
                    elif group == 1 and pd.notna(group_1_schedule):
                        pair_text = f"üìö{pair_number}üìö\n{pair_time}\n{group_1_schedule}\n"
                    elif group == 2 and pd.notna(group_2_schedule):
                        pair_text = f"üìö{pair_number}üìö\n{pair_time}\n{group_2_schedule}\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
                    if is_current and pair_text:
                        pair_text = f"<b>{pair_text}</b>"

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    if pair_text.strip(): 
                        schedule.append(pair_text)

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ —à–∫–æ–ª–µ"
            if practice_counter > 0:
                schedule.append("–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ —à–∫–æ–ª–µ.\n")
        
            break

    return "".join(schedule) if found_date and schedule else "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π.\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ —Ç–µ–∫—É—â–µ–π
def is_current_pair(pair_time, current_time):
    try:
        start_time_str, end_time_str = pair_time.split('-')
        start_time = datetime.strptime(start_time_str, "%H.%M")
        end_time = datetime.strptime(end_time_str, "%H.%M")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã
        current_time_dt = datetime.strptime(current_time, "%H.%M")
        if start_time <= current_time_dt <= end_time:
            return True
    except ValueError:
        return False
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã
def get_next_class(group, date, current_time):
    schedule = ""
    date_str = date.strftime("%Y-%m-%d")
    next_class = "–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.\n"
    practice_counter = 0  # –°—á—ë—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π

    for i in range(len(df)):
        cell_date = pd.to_datetime(df.iloc[i, 0], errors='coerce')
        if pd.notna(cell_date) and cell_date.strftime("%Y-%m-%d") == date_str:
            for j in range(7):
                time_info = df.iloc[i + j, 1]
                group_1_schedule = df.iloc[i + j, 4]
                group_2_schedule = df.iloc[i + j, 5]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
                if group_1_schedule and "–ø—Ä–∞–∫—Ç–∏–∫–∞" in group_1_schedule.lower():
                    practice_counter += 1
                    continue
                try:
                    pair_start_time = re.search(r"(\d{1,2}\.\d{2})", time_info).group(1)
                    pair_start_time_dt = datetime.strptime(pair_start_time, "%H.%M")

                    if pd.notna(time_info):
                        match = re.match(r"(\d+ –ø–∞—Ä–∞)\s+(\d{1,2}\.\d{2}-\d{1,2}\.\d{2})", time_info)
                        if match:
                            pair_number, pair_time = match.groups()
                        else:
                            pair_number, pair_time = time_info, ""
                    
                    if datetime.strptime(current_time, "%H.%M") < pair_start_time_dt:
                        if pd.notna(group_1_schedule) and group_1_schedule == group_2_schedule:
                            return f"üìö{pair_number}üìö\n{pair_time}\nü´Ç{group_1_schedule}\n"
                        if group == 1 and pd.notna(group_1_schedule):
                            return f"üìö{pair_number}üìö\n{pair_time}\n{group_1_schedule}\n"
                        elif group == 2 and pd.notna(group_2_schedule):
                            return f"üìö{pair_number}üìö\n{pair_time}\n{group_2_schedule}\n"
                except (ValueError, AttributeError):
                    continue

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ —à–∫–æ–ª–µ"
                if practice_counter > 0:
                    next_class = "–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤ —à–∫–æ–ª–µ.\n"
                break

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    update_time = get_last_update_time()
    schedule += f"\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}"

    return next_class

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –≥—Ä—É–ø–ø–∞"), KeyboardButton(text="2 –≥—Ä—É–ø–ø–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@router.message(lambda message: message.text in ["1 –≥—Ä—É–ø–ø–∞", "2 –≥—Ä—É–ø–ø–∞"])
async def choose_group(message: types.Message, state: FSMContext):
    group = 1 if message.text == "1 –≥—Ä—É–ø–ø–∞" else 2
    await state.update_data(group=group)
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
            [KeyboardButton(text="–ù–µ–¥–µ–ª—è"), KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")],
            [KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=markup)

# –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(lambda message: message.text in ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ù–µ–¥–µ–ª—è", "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", "–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞"])
async def show_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group = data.get("group", 1)
    today = datetime.now().date()
    
    if message.text == "–°–µ–≥–æ–¥–Ω—è":
        date = today
        schedule = get_schedule(group, date)
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({date.strftime('%d.%m.%Y')}):\n\n{schedule}\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}", parse_mode="HTML")
    elif message.text == "–ó–∞–≤—Ç—Ä–∞":
        date = today + timedelta(days=1)
        schedule = get_schedule(group, date)
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m.%Y')}):\n\n{schedule}\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}")
    elif message.text == "–ù–µ–¥–µ–ª—è":
        schedule = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
        for i in range(7):
            date = today + timedelta(days=i)
            daily_schedule = get_schedule(group, date)
            schedule += f"\n{date.strftime('%d.%m.%Y')}:\n{daily_schedule}"
        schedule += f"\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}"
        await message.answer(schedule, parse_mode="HTML")
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    elif message.text == "–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞":
        current_time = datetime.now().strftime("%H.%M")
        next_class = get_next_class(group, today, current_time)
        next_class += f"\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}"
        await message.answer(next_class)
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@router.message(lambda message: bool(datetime.strptime(message.text, "%d.%m.%Y") if message.text else False))
async def custom_date_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group = data.get("group", 1)
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        schedule = get_schedule(group, date)
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}:\n\n{schedule}\nüìå –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_time}", parse_mode="HTML")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def on_startup():
    if not check_update_flag():
        for user_id in subscribed_users:
            try:
                await bot.send_message(user_id, "‚öôÔ∏è –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    clear_update_flag()  # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    dp.include_router(router)
    asyncio.create_task(auto_update())  # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await on_startup()  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
